@page "/account-specs"

@inject NavigationManager Navigation
@inject IMediator Mediator
@inject ILogger<AccountSpecsPage> Logger
@using OnlineMinion.Contracts
@using OnlineMinion.Contracts.AppMessaging
@using OnlineMinion.Contracts.AppMessaging.Requests
@using OnlineMinion.Contracts.Responses
@using OnlineMinion.RestApi.Client.Requests
@using MediatR
@inherits OnlineMinion.Web.Pages.Base.BaseCancellationTokenPage

@code {
  public AccountSpecsPage() => _ct = CancellationTokenSource.Token;

  private readonly CancellationToken _ct;

  private PagingMetaInfo? _paging;
  private List<AccountSpecResp>? _vm;

  private BaseUpsertAccountSpecReqData? _modelUpsert;
  private AccountSpecResp? _modelDelete;
  private bool _isSubmitting;
  private ModalDialog _modalUpsert = null!;
  private string? _modalUpsertTitle;
  private ModalDialog _modalDelete = null!;
  private string? _modalDeleteTitle;

  [Parameter]
  [SupplyParameterFromQuery]
  public int Page { get; set; }

  [Parameter]
  [SupplyParameterFromQuery]
  public int PageSize { get; set; }

  public override async Task SetParametersAsync(ParameterView parameters)
  {
  // This order ensures that incoming params are sett before they ar needed by data loading.
    await base.SetParametersAsync(parameters);
    GetPageViewModel();
  }

  protected override void OnInitialized()
  {
    Page = Page == default ? PagingMetaInfo.DefaultCurrent : Page;
    PageSize = PageSize == default ? PagingMetaInfo.DefaultSize : PageSize;
    base.OnInitialized();
  }

  private void GetPageViewModel()
  {
    InvokeAsync(async () =>
    {
      _vm = null;

      var result = await Mediator.Send(new GetAccountSpecsReq(Page, PageSize), _ct);

      _paging = result.Paging;
      StateHasChanged();

      _vm = new();

      await foreach (var model in result.Result.WithCancellation(_ct))
      {
        _vm.Add(model);
        StateHasChanged();
      }
    });
  }

  private void PageChanged(int page)
  {
    var old = Page;

    Page = _paging?.SanitizePage(page) ?? PagingMetaInfo.First;
    if (Page == old)
    {
      return;
    }

    NavigateByPager();
  }

  private void PageSizeChanged(int size)
  {
    PageSize = size;
    Page = _paging?.GetNewCurrentBySize(PageSize) ?? PagingMetaInfo.First;

    NavigateByPager();
  }

  private void NavigateByPager(int? page = null) => Navigation.NavigateTo(
    Navigation.GetUriWithQueryParameters(
      new Dictionary<string, object?> { [nameof(Page)] = page ?? Page, [nameof(PageSize)] = PageSize, }
      ));

  private void OnAddHandler()
  {
    if (_modelUpsert is not CreateAccountSpecReq)
    {
      _modelUpsert = new CreateAccountSpecReq();
    }

    _modalUpsertTitle = "Add new Account Specification";
    _modalUpsert.Open();
  }

  private async Task OnEditHandler(int id)
  {
    if (_modelUpsert is UpdateAccountSpecReq cmd && cmd.Id == id)
    {
      _modalUpsertTitle = GetTitle();
      _modalUpsert.Open();

      return;
    }

    if (await Mediator.Send(new GetAccountSpecByIdReq(id), _ct) is { } model)
    {
      _modelUpsert = new UpdateAccountSpecReq(model.Id, model.Name, model.Group, model.Description);
      _modalUpsertTitle = GetTitle();
      _modalUpsert.Open();
    }
    else
    {
      Logger.LogWarning("Account Specification {Id} do not exist anymore in database", id);
    }

    string GetTitle() => $"Edit Account Specification: id#{id}";
  }

  private async Task OnValidSubmitHandler()
  {
    switch (_modelUpsert)
    {
      case null:
        return;
      case UpdateAccountSpecReq req:
        await SubmitUpdate(req);
        break;
      case CreateAccountSpecReq req:
        await SubmitCreate(req);
        break;
    }
  }

  private async Task SubmitUpdate(UpdateAccountSpecReq request)
  {
  // TODO: problem handling in UI
    _isSubmitting = true;
    var result = await Mediator.Send(request, _ct);
    _isSubmitting = false;

    if (result.Value)
    {
      _modalUpsert.Close();
      var model = _vm!.Single(m => m.Id == request.Id);
      var clone = model with { Name = request.Name, Group = request.Group, Description = request.Description, };

      _vm![_vm.IndexOf(model)] = clone;

      _modelUpsert = null;
    }
    else
    {
      Logger.LogWarning("Account Specification {Action} failed", "update");
    }
  }

  private async Task SubmitCreate(CreateAccountSpecReq request)
  {
    // TODO: problem handling in UI
    _isSubmitting = true;
    var result = await Mediator.Send(request, _ct);
    _isSubmitting = false;

    if (result.IsSuccess)
    {
      _modalUpsert.Close();
      await NavigateToNewItemPage();
      _modelUpsert = null;
    }
    else
    {
      Logger.LogWarning("Account Specification {Action} failed", "creation");
    }
  }

  private async Task NavigateToNewItemPage()
  {
    if (await Mediator.Send(new GetAccountSpecPageCountBySizeReq(PageSize), _ct) is not { } pages)
    {
      Logger.LogWarning("Table pagination to new element's page skipped, didn't got paging metadata");

      return;
    }

    if (pages == Page)
    {
      GetPageViewModel();
    }
    else
    {
      NavigateByPager(pages);
    }
  }

  private void OnDeleteHandler(int id)
  {
    _modelDelete = _vm!.Single(m => m.Id == id);
    _modalDeleteTitle = GetTitle();
    _modalDelete.Open();

    string GetTitle() => $"Delete Account Specification: id#{id}";
  }

  private async Task OnDeleteSubmitHandler()
  {
    if (_modelDelete is null)
    {
      return;
    }

    var id = _modelDelete.Value.Id;

    _isSubmitting = true;
    var result = await Mediator.Send(new DeleteAccountSpecReq(id), _ct);
    _isSubmitting = false;

    if (result)
    {
      _modalDelete.Close();
      HandlePageStateAfterDelete();
    }
    else
    {
      Logger.LogWarning("Account Specification {Id} do not exist anymore in database", id);
    }
  }

  private void HandlePageStateAfterDelete()
  {
  // Detect it was last item on page, or very last item of the whole resource.
  // Navigate only, when page has to be changed, get current page's items otherwise.
    if (_paging?.TotalItems > 1 && _vm?.Count == 1)
    {
      Page = _paging!.Value.Previous;
      NavigateByPager();
    }
    else
    {
      GetPageViewModel();
    }

    _modelDelete = null;
  }

}

<AppPageTitle>Account Specs</AppPageTitle>

<h1>Account Specifications</h1>

<p>Manage Account Specifications</p>

@if (_paging is null)
{
  <p>No content to page | loading ...</p>
}
else
{
  <ToolbarForTabular OnAdd="@OnAddHandler">
    <Pager OnPageChanged="@PageChanged" OnPageSizeChanged="@PageSizeChanged" PagingMetaInfo="@_paging.Value"/>
  </ToolbarForTabular>
}

@if (_vm is null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else if (!_vm.Any())
{
  <p>
    <em>No items.</em>
  </p>
}
else
{
  <table class="table">
    <thead>
    <tr>
      <th>@nameof(_modelUpsert.Name)</th>
      <th>@nameof(_modelUpsert.Group)</th>
      <th>@nameof(_modelUpsert.Description)</th>
      <th></th>
    </tr>
    </thead>
    <tbody style="overflow-y:scroll" tabindex="-1">
    <Virtualize Context="m" Items="_vm">
      <tr>
        <td>@m.Name</td>
        <td>@m.Description</td>
        <td>@m.Group</td>
        <td>
          <button class="btn btn-outline-danger" @onclick="@(() => OnDeleteHandler(m.Id))">❌</button>
          <button class="btn btn-outline-warning" @onclick="@(() => OnEditHandler(m.Id))">🛠️</button>
        </td>
      </tr>
    </Virtualize>
    </tbody>
  </table>
}

@*TODO: Set focus to modal, if it is opened.*@
<ModalDialog @ref="@_modalUpsert" Title="@_modalUpsertTitle">
  <AccountSpecsPageEditor IsSubmitting="@_isSubmitting" Model="@_modelUpsert" OnValidSubmit="@OnValidSubmitHandler"/>
</ModalDialog>

<ModalDialog @ref="@_modalDelete" Title="@_modalDeleteTitle">
  <div class="row">
    <h3>
      Confirm deletion
    </h3>

    <h6>@nameof(AccountSpecResp.Name)</h6>
    <h5>@_modelDelete?.Name</h5>

    <h6>@nameof(AccountSpecResp.Group)</h6>
    <h5>@_modelDelete?.Group</h5>

    <h6>@nameof(AccountSpecResp.Description)</h6>
    <h5>@_modelDelete?.Description</h5>

    <button class="btn btn-outline-danger" @onclick="@OnDeleteSubmitHandler">Submit</button>
  </div>
</ModalDialog>
