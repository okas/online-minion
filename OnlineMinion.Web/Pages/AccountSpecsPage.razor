@page "/account-specs"

@inject NavigationManager Navigation
@inject IMediator Mediator
@inject ILogger<AccountSpecsPage> Logger
@using OnlineMinion.Contracts.Responses
@using OnlineMinion.Contracts
@using OnlineMinion.Contracts.Commands
@using OnlineMinion.Contracts.Queries
@using MediatR
@using UpdateAccountSpecCmd = OnlineMinion.Web.CQRS.Commands.UpdateAccountSpecCmd
@using CreateAccountSpecCmd = OnlineMinion.Web.CQRS.Commands.CreateAccountSpecCmd
@inherits OnlineMinion.Web.Infrastructure.BaseCancellationTokenPage

@code {
  public AccountSpecsPage() => _ct = CancellationTokenSource.Token;

  private readonly CancellationToken _ct;
  private BasePagedResult<AccountSpecResp>? _vm;

  private BaseUpsertAccountSpecCmd? _formModel;
  private AccountSpecResp? _deleteModel;
  private bool _isSubmitting;
  private ModalDialog _modalUpsert = null!;
  private string? _modalUpsertTitle;
  private ModalDialog _modalDelete = null!;
  private string? _modalDeleteTitle;

  private int? _page;
  private int? _size;

  [Parameter]
  [SupplyParameterFromQuery]
  public int Page { get => _page ?? PagingMetaInfo.DefaultCurrent; set => _page = value == default ? PagingMetaInfo.DefaultCurrent : value; }

  [Parameter]
  [SupplyParameterFromQuery]
  public int PageSize { get => _size ?? PagingMetaInfo.DefaultSize; set => _size = value == default ? PagingMetaInfo.DefaultSize : value; }

  protected override async Task OnParametersSetAsync()
  {
    await LoadPagedModels();

    await base.OnParametersSetAsync();
  }

  private async Task LoadPagedModels()
  {
    _vm = await Mediator.Send(new GetAccountSpecsQry(Page, PageSize), _ct);
  }

  private async Task OnValidSubmitHandler()
  {
    if (_formModel is null)
    {
      return;
    }

    if (!await SendUpsertCommand())
    {
      return;
    }

    _modalUpsert.Close();

    if (_formModel is UpdateAccountSpecCmd cmd)
    {
      UpdateViewModelItem(cmd);
    }
    else
    {
      await NavigateToNewItemPage();
    }

    _formModel = null;
  }

  private async Task<bool> SendUpsertCommand()
  {
    _isSubmitting = true;
    var isSuccess = await Mediator.Send(_formModel!, _ct);
    _isSubmitting = false;

    if (isSuccess)
    {
      return true;
    }

    var action = _formModel is UpdateAccountSpecCmd ? "update" : "creation";
    Logger.LogWarning("Account Specification {Action} failed", action);

    return false;
  }

  private void UpdateViewModelItem(UpdateAccountSpecCmd cmd)
  {
    var list = _vm!.Value.Result;

    var model = list.Single(m => m.Id == cmd.Id)!;
    var clone = model with { Name = cmd.Name, Group = cmd.Group, Description = cmd.Description };

    list[list.IndexOf(model)] = clone;
  }

  private async Task NavigateToNewItemPage()
  {
    if (await Mediator.Send(new GetAccountSpecPageCountBySizeQry(PageSize), _ct) is { } pages)
    {
      NavigateByPager(pages);
    }
    else
    {
      Logger.LogWarning("Table pagination to new element's page skipped, didn't got paging metadata");
    }
  }

  private void PageChanged(int page)
  {
    var old = Page;

    Page = _vm!.Value.Paging.SanitizePage(page);
    if (Page == old)
    {
      return;
    }

    NavigateByPager();
  }

  private void PageSizeChanged(int size)
  {
    PageSize = size;
    Page = _vm!.Value.Paging.GetNewCurrentBySize(PageSize);

    NavigateByPager();
  }

  private void NavigateByPager(int? page = null) => Navigation.NavigateTo(
    Navigation.GetUriWithQueryParameters(
      new Dictionary<string, object?> { [nameof(Page)] = page ?? Page, [nameof(PageSize)] = PageSize }
      ));

  private void OnAddHandler()
  {
    if (_formModel is not CreateAccountSpecCmd)
    {
      _formModel = new CreateAccountSpecCmd();
    }

    _modalUpsertTitle = "Add new Account Specification";
    _modalUpsert.Open();
  }

  private async Task OnEditHandler(int id)
  {
    if (_formModel is UpdateAccountSpecCmd cmd && cmd.Id == id)
    {
      _modalUpsertTitle = GetTitle();
      _modalUpsert.Open();

      return;
    }

    if (await Mediator.Send(new GetAccountSpecByIdQry(id), _ct) is { } model)
    {
      _formModel = new UpdateAccountSpecCmd(model.Id, model.Name, model.Group, model.Description);
      _modalUpsertTitle = GetTitle();
      _modalUpsert.Open();
    }
    else
    {
      Logger.LogWarning("Account Specification {Id} do not exist anymore in database", id);
    }

    string GetTitle() => $"Edit Account Specification: id#{id}";
  }

  private void OnDeleteHandler(int id)
  {
    _deleteModel = _vm?.Result.Single(m => m.Id == id);
    _modalDeleteTitle = GetTitle();
    _modalDelete.Open();

    string GetTitle() => $"Delete Account Specification: id#{id}";
  }

  private async Task OnDeleteSubmitHandler()
  {
    if (_deleteModel is null)
    {
      return;
    }

    var id = _deleteModel.Value.Id;

    _isSubmitting = true;

    if (await Mediator.Send(new DeleteAccountSpecCmd(id), _ct) == 1)
    {
      _modalDelete.Close();
      await LoadPagedModels();
    }
    else
    {
      Logger.LogWarning("Account Specification {Id} do not exist anymore in database", id);
    }

    _isSubmitting = false;
  }

}

<AppPageTitle>Account Specs</AppPageTitle>

<h1>Account Specifications</h1>

<p>Manage Account Specifications</p>

@if (_vm is not null)
{
  <ToolbarForTabular OnAdd="OnAddHandler">
    <Pager OnPageChanged="@PageChanged" OnPageSizeChanged="@PageSizeChanged" PagingMetaInfo="_vm.Value.Paging"/>
  </ToolbarForTabular>
}

@if (_vm is null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else if (!_vm.Value.Result.Any())
{
  <p>
    <em>No items.</em>
  </p>
}
else
{
  <table class="table">
    <thead>
    <tr>
      <th>@nameof(_formModel.Name)</th>
      <th>@nameof(_formModel.Group)</th>
      <th>@nameof(_formModel.Description)</th>
      <th></th>
    </tr>
    </thead>
    <tbody style="overflow-y:scroll" tabindex="-1">
    <Virtualize Context="m" Items="_vm.Value.Result">
      <tr>
        <td>@m.Name</td>
        <td>@m.Description</td>
        <td>@m.Group</td>
        <td>
          <button class="btn btn-outline-danger" @onclick="@(() => OnDeleteHandler(m.Id))">❌</button>
          <button class="btn btn-outline-warning" @onclick="@(() => OnEditHandler(m.Id))">🛠️</button>
        </td>
      </tr>
    </Virtualize>
    </tbody>
  </table>
}

@*TODO: Set focus to modal, if it is opened.*@
<ModalDialog @ref="@_modalUpsert" Title="@_modalUpsertTitle">
  <AccountSpecsPageEditor IsSubmitting="@_isSubmitting" Model="@_formModel" OnValidSubmit="@OnValidSubmitHandler"/>
</ModalDialog>

<ModalDialog @ref="@_modalDelete" Title="@_modalDeleteTitle">
  <div class="row">
    <h3>
      Confirm deletion
    </h3>

    <h6>@nameof(AccountSpecResp.Name)</h6>
    <h5>@_deleteModel?.Name</h5>

    <h6>@nameof(AccountSpecResp.Group)</h6>
    <h5>@_deleteModel?.Group</h5>

    <h6>@nameof(AccountSpecResp.Description)</h6>
    <h5>@_deleteModel?.Description</h5>

    <button class="btn btn-outline-danger" @onclick="@OnDeleteSubmitHandler">❌</button>
  </div>
</ModalDialog>
