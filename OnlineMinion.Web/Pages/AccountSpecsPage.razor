@page "/account-specs"

@inject NavigationManager Navigation
@inject IMediator Mediator
@inject ILogger<AccountSpecResp> Logger
@using OnlineMinion.Contracts.Responses
@using OnlineMinion.Contracts
@using OnlineMinion.Contracts.Queries
@using MediatR
@inherits OnlineMinion.Web.Infrastructure.BaseCancellationTokenPage

@code {
  public AccountSpecsPage() => _ct = CancellationTokenSource.Token;

  private readonly CancellationToken _ct;
  private BasePagedResult<AccountSpecResp>? _vm;

  private bool _isSubmitting;
  private CreateAccountSpecCmd? _formModel;
  private ModalDialog _modalDialog = null!;

  private int? _page;
  private int? _size;

  [Parameter]
  [SupplyParameterFromQuery]
  public int Page { get => _page ?? PagingMetaInfo.DefaultCurrent; set => _page = value == default ? PagingMetaInfo.DefaultCurrent : value; }

  [Parameter]
  [SupplyParameterFromQuery]
  public int PageSize { get => _size ?? PagingMetaInfo.DefaultSize; set => _size = value == default ? PagingMetaInfo.DefaultSize : value; }

  protected override async Task OnParametersSetAsync()
  {
    _vm = await Mediator.Send(new GetAccountSpecsQry(Page, PageSize), _ct);

    await base.OnParametersSetAsync();
  }

  private async Task ValidSubmitHandler()
  {
    _isSubmitting = true;

    if (_formModel is not null && await Mediator.Send(_formModel, _ct))
    {
      _modalDialog.Close();
      _formModel = null;
      await NavigateToNewItemPage();
    }

    _isSubmitting = false;
  }

  private async Task NavigateToNewItemPage()
  {
    if (await Mediator.Send(new GetAccountSpecsPagesCountBySizeQry(PageSize), _ct) is { } pages)
    {
      NavigateByPager(pages);
    }
    else
    {
      Logger.LogWarning("Table pagination to new element's page skipped, didn't got paging metadata");
    }
  }

  private void PageChanged(int page)
  {
    var old = Page;

    Page = _vm!.Value.Paging.SanitizePage(page);
    if (Page == old)
    {
      return;
    }

    NavigateByPager();
  }

  private void PageSizeChanged(int size)
  {
    PageSize = size;
    Page = _vm!.Value.Paging.GetNewCurrentBySize(PageSize);

    NavigateByPager();
  }

  private void NavigateByPager(int? page = null) => Navigation.NavigateTo(
    Navigation.GetUriWithQueryParameters(
      new Dictionary<string, object?> { [nameof(Page)] = page ?? Page, [nameof(PageSize)] = PageSize }
      ));

  private void OnAddHandler()
  {
    _formModel = new();
    _modalDialog.Open();
  }

}

<AppPageTitle>Account Specs</AppPageTitle>

<h1>Account Specifications</h1>

<p>Manage Account Specifications</p>
@{
  var name = nameof(_formModel.Name);
  var nameLower = name.ToLowerInvariant();
  var group = nameof(_formModel.Group);
  var groupLower = group.ToLowerInvariant();
  var description = nameof(_formModel.Description);
  var descriptionLower = description.ToLowerInvariant();
}
@if (_vm is not null)
{
  <ToolbarForTabular OnAdd="OnAddHandler">
    <Pager OnPageChanged="@PageChanged" OnPageSizeChanged="@PageSizeChanged" PagingMetaInfo="_vm.Value.Paging" />
  </ToolbarForTabular>
}

@if (_vm is null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else if (!_vm.Value.Result.Any())
{
  <p>
    <em>No items.</em>
  </p>
}
else
{
  <table class="table">
    <thead>
    <tr>
      <th>@name</th>
      <th>@description</th>
      <th>@group</th>
    </tr>
    </thead>
    <tbody style="overflow-y:scroll" tabindex="-1">
    <Virtualize Context="m" Items="_vm.Value.Result">
      <tr @onclick="@(() => Console.WriteLine($"Id: {m.Id}"))">
        <td>@m.Name</td>
        <td>@m.Description</td>
        <td>@m.Group</td>
      </tr>
    </Virtualize>
    </tbody>
  </table>
}

<ModalDialog @ref="@_modalDialog" Title="Add new Account Specification">
  <div class="row">
    <EditForm Model="@_formModel" OnValidSubmit="@ValidSubmitHandler">
      <DataAnnotationsValidator />
      <ValidationSummary />

      <fieldset disabled="@_isSubmitting">
        <div class="form-group">
          <label for="@nameLower">@name</label>
          <InputText @bind-Value="@_formModel.Name" class="form-control" id="@nameLower" placeholder="@($"Enter {nameLower}")" />
        </div>

        <div class="form-group">
          <label for="@groupLower">@group</label>
          <InputText @bind-Value="@_formModel.Group" class="form-control" id="@groupLower" placeholder="@($"Enter {groupLower}")" />
        </div>

        <div class="form-group">
          <label for="@descriptionLower">@description</label>
          <InputText @bind-Value="@_formModel.Description" class="form-control" id="@descriptionLower" placeholder="@($"Enter {descriptionLower}")" />
        </div>

        <hr />

        <div class="form-group row">
          <div class="col-sm-2">
            <button class="btn btn-primary form-control" type="submit">
              Add
            </button>
          </div>
        </div>
      </fieldset>
    </EditForm>

  </div>
</ModalDialog>
