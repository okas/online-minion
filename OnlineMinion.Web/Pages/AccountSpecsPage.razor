@page "/account-specs"
@using OnlineMinion.Contracts.Responses
@using OnlineMinion.Contracts

@code
{
  private static class Str
  {
    public const string PageTitle = "Account Specs";
    public const string MainHeading = "Account Specifications";
    public const string MainDescription = "Manage Account Specifications";
    public const string DeleteBtn = "❌";
    public const string EditBtn = "✏️";
    public const string Name = nameof(AccountSpecResp.Name);
    public const string Group = nameof(AccountSpecResp.Group);
    public const string Description = nameof(AccountSpecResp.Description);
  }

}

<AppPageTitle Text="@Str.PageTitle"/>

<RadzenText Text="@Str.MainHeading" TextStyle="TextStyle.H3"/>
<RadzenText Text="@Str.MainDescription"/>

<ToolbarForTabular OnAdd="@OnAddHandler"/>

@* `Data="@_vm.AsODataEnumerable()"`: This seems to work better with LoadData event. *@
<RadzenDataGrid
    AllowPaging
    Count="@_totalItemsCount"
    Data="@_vm.AsODataEnumerable()"
    Density="@Density.Compact"
    IsLoading="@_isLoadingVm"
    LoadData="@OnLoadDataHandler"
    PagerPosition="@PagerPosition.TopAndBottom"
    PageSize="@PagingMetaInfo.DefaultSize"
    PageSizeOptions="@_pageSizeOptions"
    ShowPagingSummary>
  <Columns>
    <RadzenDataGridColumn Property="@Str.Name" TItem="AccountSpecResp" Title="@Str.Name"/>
    <RadzenDataGridColumn Property="@Str.Group" TItem="AccountSpecResp" Title="@Str.Group"/>
    <RadzenDataGridColumn Property="@Str.Description" TItem="AccountSpecResp" Title="@Str.Description"/>
    <RadzenDataGridColumn TItem="AccountSpecResp" Title="Actions">
      <Template Context="m">
        <RadzenButton ButtonStyle="@ButtonStyle.Warning" Click="@(() => OnEditHandler(m.Id))" Variant="@Variant.Text">
          @Str.EditBtn
        </RadzenButton>
        <RadzenButton ButtonStyle="@ButtonStyle.Danger" Click="@(() => OnDeleteHandler(m.Id))" Variant="@Variant.Text">
          @Str.DeleteBtn
        </RadzenButton>
      </Template>
    </RadzenDataGridColumn>
  </Columns>
</RadzenDataGrid>

@*TODO: Set focus to modal, if it is opened.*@
<CascadingValue IsFixed="@true" Value="@CT">
  <AccountSpecsUpsertEditor IsSubmitting="@_isSubmitting" Model="@_modelUpsert" OnSubmit="@OnUpsertSubmitHandler" @ref="@_upsertEditorRef"/>
</CascadingValue>

<AccountSpecsDeleteDialog Model="@_modelDelete" OnConfirm="OnDeleteConfirmHandler" @ref="@_deleteDialogRef"/>
