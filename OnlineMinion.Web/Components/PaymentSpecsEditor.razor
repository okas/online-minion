@using OnlineMinion.Contracts.PaymentSpec.Responses
@using OnlineMinion.Contracts.CurrencyInfo.Responses
@using OnlineMinion.Web.CurrencyInfo.ViewModels

@code {

  // If L18n is needed, this should be put to code-behind part and obtain translations from there.
  private static class Str
  {
    public const string Name = nameof(PaymentSpecResp.Name);
    public const string CurrencyCodeField = "Currency";
    public const string Tags = nameof(PaymentSpecResp.Tags);
    public const string Symbol = nameof(CurrencyInfoResp.Symbol);
    public const string IsoCode = nameof(CurrencyInfoResp.IsoCode);
    public const string IsoCodeField = "ISO code";
    public const string DisplayValue = nameof(CurrencyInfoVm.Display);
  }

}

<UpsertEditorWrapper Model="@Model" OnCancel="@OnCancel" OnSubmit="@OnSubmit" @ref="@WrapperRef">
  <EditorFormFields>
    <RadzenFormField Style="width:71%" Text="@Str.Name" Variant="@Variant.Text">
      <RadzenTextBox @bind-Value="@context.Name" Trim="@true"/>
    </RadzenFormField>
    <RadzenFormField Style="width: 25%" Text="@Str.CurrencyCodeField" Variant="@Variant.Text">
      <RadzenDropDownDataGrid
          AllowClear="@true"
          AllowFilteringByAllStringColumns="@true"
          AllowVirtualization="@true"
          @bind-Value="@context.CurrencyCode"
          Data="@CurrencyInfoVMs"
          Density="@Density.Compact"
          FilterCaseSensitivity="@FilterCaseSensitivity.CaseInsensitive"
          PageSize="10"
          TextProperty="@Str.DisplayValue"
          ValueProperty="@Str.IsoCode">
        <Columns>
          <RadzenDropDownDataGridColumn Property="@Str.IsoCode" Title="@Str.IsoCodeField"/>
          <RadzenDropDownDataGridColumn Property="@Str.Symbol" Title="@Str.Symbol"/>
        </Columns>
      </RadzenDropDownDataGrid>
    </RadzenFormField>
    <RadzenFormField Style="width: 100%" Text="@Str.Tags" Variant="@Variant.Text">
      <RadzenTextBox @bind-Value="@context.Tags" Trim="@true"/>
    </RadzenFormField>
  </EditorFormFields>
</UpsertEditorWrapper>
