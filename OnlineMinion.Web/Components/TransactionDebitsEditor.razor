@using static Common.Utilities.TypeMemberHelpers;
@using OnlineMinion.Contracts.Transactions.Debit
@using OnlineMinion.Contracts.PaymentSpec.Responses
@using OnlineMinion.Contracts.AccountSpec.Responses
@using OnlineMinion.Web.ViewModels.Transaction.Debit
@using System.Globalization

@code {

  [Parameter]
  public UpsertEditorWrapper<BaseUpsertTransactionDebitReqData> WrapperRef { get; set; } = default!;

  // TODO: To Cascading Parameter
  [Parameter]
  [EditorRequired]
  public BaseUpsertTransactionDebitReqData? Model { get; set; }

  [Parameter]
  [EditorRequired]
  public EventCallback<EditContext> OnSubmit { get; set; }

  [Parameter]
  public EventCallback OnCancel { get; set; }

  [Parameter]
  [EditorRequired]
  public IEnumerable<PaymentSpecDescriptorResp> PaymentSpecDescriptors { get; set; }
    = Enumerable.Empty<PaymentSpecDescriptorResp>();

  [Parameter]
  [EditorRequired]
  public IEnumerable<AccountSpecDescriptorResp> AccountSpecDescriptors { get; set; }
    = Enumerable.Empty<AccountSpecDescriptorResp>();

  private static class Str
  {
    public const string Date = nameof(TransactionDebitListItem.Date);
    public const string Amount = nameof(TransactionDebitListItem.Amount);
    public const string Subject = nameof(TransactionDebitListItem.Subject);
    public const string Party = nameof(TransactionDebitListItem.Party);
    public const string PaymentInstrumentColumn = "paymnt. opt.";
    public const string Tags = nameof(TransactionDebitListItem.Tags);
    public const string Fee = nameof(TransactionDebitListItem.Fee);
    public const string AccountSpecColumn = "acc. spec.";

    public static readonly string PaymentInstrumentName = NestedNameOf<TransactionDebitListItem>(
      x => x.PaymentInstrument.Name
      );

    public static readonly string AccountSpecName = NestedNameOf<TransactionDebitListItem>(
      x => x.AccountSpec.Name
      );
  }

}

<UpsertEditorWrapper Model="@Model" OnCancel="@OnCancel" OnSubmit="@OnSubmit" @ref="@WrapperRef">
  <EditorFormFields>
    <RadzenFormField Style="width:30%" Text="@Str.Date" Variant="@Variant.Text">
      <RadzenDatePicker
          Change="@(dateTime => context.Date = DateOnly.FromDateTime(dateTime.GetValueOrDefault()))"
          DateFormat="@CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern"
          TValue="DateTime"
          Value="@(context.Date.ToDateTime(TimeOnly.MinValue))"/>
    </RadzenFormField>
    <RadzenFormField Style="width: 30%" Text="@Str.Amount" Variant="@Variant.Text">
      <RadzenNumeric @bind-Value="@context.Amount" Format="c"/>
    </RadzenFormField>
    <RadzenFormField Style="width: 36%" Text="@Str.Party" Variant="@Variant.Text">
      <RadzenTextBox @bind-Value="@context.Party" Trim="@true"/>
    </RadzenFormField>
    <RadzenFormField Style="width: 98%" Text="@Str.Subject" Variant="@Variant.Text">
      <RadzenTextBox @bind-Value="@context.Subject" Trim="@true"/>
    </RadzenFormField>
    <RadzenFormField Style="width: 43%" Text="@Str.PaymentInstrumentColumn" Variant="@Variant.Text">
      <RadzenDropDown
          AllowClear="@true"
          AllowFiltering="@true"
          @bind-Value="@context.PaymentInstrumentId"
          Data="@PaymentSpecDescriptors"
          TextProperty="@nameof(PaymentSpecResp.Name)"
          ValueProperty="@nameof(PaymentSpecResp.Id)"/>
    </RadzenFormField>
    <RadzenFormField Style="width: 43%" Text="@Str.AccountSpecColumn" Variant="@Variant.Text">
      <RadzenDropDown
          AllowClear="@true"
          AllowFiltering="@true"
          @bind-Value="@context.AccountSpecId"
          Data="@AccountSpecDescriptors"
          TextProperty="@nameof(AccountSpecResp.Name)"
          ValueProperty="@nameof(AccountSpecResp.Id)"/>
    </RadzenFormField>
    <RadzenFormField Style="width: 98%" Text="@Str.Fee" Variant="@Variant.Text">
      <RadzenNumeric @bind-Value="@context.Fee" Format="c"/>
    </RadzenFormField>
    <RadzenFormField Style="width:98%" Text="@Str.Tags" Variant="@Variant.Text">
      <RadzenTextBox @bind-Value="@context.Tags" Trim="@true"/>
    </RadzenFormField>
  </EditorFormFields>
</UpsertEditorWrapper>
